name: Go

on:
  push:
     tags:
       - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build-arm5
      run: |
        GOARM=5 GOARCH=arm go build -o multiudp.arm5 -v .
        GOARCH=amd64 go build -o multiudp.amd64 -v . 
        GOARCH=mipsle GOMIPS=softfloat go build -o multiudp.mipsle -v . 
        GOARCH=arm64  go build -o multiudp.arm64 -v .         
        
 
    - name: pack
      run: |
        tar czf multiudp.arm5.tar.gz multiudp.arm5
        tar czf multiudp.amd64.tar.gz multiudp.amd64
        tar czf multiudp.mipsle.tar.gz multiudp.mipsle
        tar czf multiudp.arm64.tar.gz multiudp.arm64
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./multiudp.amd64.tar.gz
        asset_name: multiudp.amd64.tar.gz
        asset_content_type: application/x-tgz
        
    - name: Upload Release Asset
      id: upload-release-asset1 
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./multiudp.arm5.tar.gz
        asset_name: multiudp.arm5.tar.gz
        asset_content_type: application/x-tgz
            
    - name: Upload Release Asset
      id: upload-release-asset2
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./multiudp.mipsle.tar.gz
        asset_name: multiudp.mipsle.tar.gz
        asset_content_type: application/x-tgz 

    - name: Upload Release Asset
      id: upload-release-asset3
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./multiudp.arm64.tar.gz
        asset_name: multiudp.arm64.tar.gz
        asset_content_type: application/x-tgz 
